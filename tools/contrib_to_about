#!/bin/env python3
#
# Copyright (c) 2020 Jim Ramsay <i.am@jimramsay.com>
# Copyright (c) 2020 Hans Ulrich Niedermann <hun@n-dimensional.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


"""\
contrib-to-about - convert CONTRIBUTORS.md to python module

Usage:
   tools/contrib-to-about

This reads `../CONTRIBUTORS.md` and writes a new python module
`../soundcraft/contributors.py` if necessary and requested. The file
locations are determined relative to the location of the
`contrib-to-about` script file.

Options:
    --check
        Only check whether the file would change; never actually change it.
        The exit code will be non-0 if the file would be changed.
    --diff
        Only show the changes which would be done to the python module as
        a `diff -u` patch; never actually change it.
        The exit code will be non-0 if the file would be changed.
    --git-add
        If changes were made, automatically stage these changes for
        commit.
    --help
        Show this message and exit.

The --check and --diff options mimick the behaviour of the `black`
source code formatting tool.
"""


import hashlib
import re
import subprocess
import sys

from pathlib import Path
from os import chdir


# parse command line (--check and --diff just like the `black` command)
args = sys.argv[1:]
flag = set()
flag_check = False
flag_diff = False
flag_git_add = False
for arg in args:
    if arg == "--check":
        flag_check = True
    elif arg == "--diff":
        flag_diff = True
    elif arg == "--git-add":
        flag_git_add = True
    elif arg == "--help":
        sys.stdout.write(__doc__)
        sys.exit(0)
    else:
        raise ValueError("Invalid command line argument")


author_format = re.compile(
    r"^- \[(?P<name>[^]]+)]\(mailto:(?P<email>[^)]+)\)(?P<description>.*)"
)
link_format = re.compile(r"\[(?P<name>[^]]+)]\((?P<url>[^)]+)\)")


# Change to the top of the source tree before reading or writing any
# files, so that we always read and write files in the correct place.
chdir(Path(__file__).absolute().parent.parent)


def parseMarkdown(line):
    author_match = author_format.match(line)
    if author_match is not None:
        author = author_match.groupdict()
        return f"{author['name']} <{author['email']}>{author['description']}"
    link_match = link_format.search(line)
    if link_match is not None:
        link = link_match.groupdict()
        return f"{link['name']} {link['url']}"
    return line.lstrip("- ")


contributors = {}
section = None
with open("CONTRIBUTORS.md") as contrib:
    for line in contrib:
        line = line.rstrip("\n")
        if line.startswith("- "):
            contributors[section].append(parseMarkdown(line))
        elif line.startswith("--") or len(line) == 0:
            next  # skip header underlining lines and empty lines
        else:
            section = line
            contributors[section] = []


# print(f"authors={contributors['Contributors']}")
# print(f"artists={contributors['Artwork']}")


def write_people(file, people_group, people_list):
    if len(people_list) == 0:
        file.write(f"{people_group} = []\n")
    elif len(people_list) == 1:
        person = people_list[0]
        file.write(f'{people_group} = ["{person}"]\n')
    else:
        file.write(f"{people_group} = [\n")
        for person in people_list:
            file.write(f'    "{person}",\n')
        file.write(f"]\n")


target_path = Path("soundcraft/contributors.py")
new_path = Path(f"{target_path}.new")
with new_path.open("w") as dst:
    tool_name = Path(__file__).name
    dst.write(
        f'''\
"""\\
{target_path} - autogenerated from CONTRIBUTORS.md

DO NOT EDIT THIS FILE. EDIT `CONTRIBUTORS.md` INSTEAD
and update this file by re-running {tool_name}.
"""

'''
    )
    write_people(dst, "authors", contributors["Contributors"])
    write_people(dst, "artists", contributors["Artwork"])


def file_hash(filepath):
    try:
        m = hashlib.sha256()
        m.update(filepath.read_bytes())
        d = m.digest()
        return d
    except FileNotFoundError:
        # This return string differs from all hash digests, and also
        # differs for different filenames.
        return "file not found ({filepath})"


hash_new = file_hash(new_path)
hash_target = file_hash(target_path)

if hash_new == hash_target:
    print(f"Not updating {target_path} (no changes)")
    new_path.unlink()
    sys.exit(0)
else:
    if flag_diff:
        subprocess.run(["diff", "-u", target_path, new_path], check=False)
        new_path.unlink()
        sys.exit(1)
    if flag_check:
        print(f"File {target_path} would be updated from {new_path}.")
        new_path.unlink()
        sys.exit(1)
    else:
        print(f"Update {target_path} from {new_path} (changes detected)")
        new_path.rename(target_path)
        if flag_git_add:
            subprocess.run(["git", "add", target_path])
        sys.exit(0)
