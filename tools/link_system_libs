#!/usr/bin/env python3
#
# Copyright (c) 2020 Jim Ramsay <i.am@jimramsay.com>
# Copyright (c) 2020 Hans Ulrich Niedermann <hun@n-dimensional.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Usage:
#     tools/link_system_libs
#
# In the pipenv virtualenv, create appropriate symlinks from
# site-packages/gi pointing to the system's {dist,site}-packages/gi,
# so that using the pipenv can succeed later without needing to
# compile the *HUGE* amount of gobject package dependencies.


import subprocess
import sys

from importlib import import_module
from pathlib import Path


def pipenv_values(var_names):
    """Get the value for expr_string from a pipenv python3"""
    prog = "\n".join(
        ["import sys"] + [f"print('{var}', '=', repr(sys.{var}))" for var in var_names]
    )
    # print("prog", repr(prog))
    cmd = ["pipenv", "run", "python3", "-c", prog]
    proc = subprocess.run(cmd, check=True, capture_output=True, text=True)
    # print("proc.stdout", repr(proc.stdout))
    vars = {}
    exec(proc.stdout, vars, vars)
    retval = dict([(k, vars[k]) for k in var_names])
    # print("retval", repr(retval))
    return retval


def ensure_symlink(target, symlink):
    """Ensure symlink 'symlink' points to target 'target'"""
    print(" ", "from", symlink)
    print(" ", "  to", target)
    if symlink.is_symlink():
        if symlink.samefile(target):
            print(" ", "    ", "symlink exists and is pointing to the target")
        else:
            print(" ", "    ", "updating symlink")
            symlink.unlink()
            symlink.symlink_to(target)
    elif symlink.exists():
        raise RuntimeError("Something with the symlink name already exists")
    else:
        print(" ", "    ", "creating symlink")
        symlink.parent.mkdir(mode=0o755, parents=True, exist_ok=True)
        symlink.symlink_to(target)


class LibraryLinker:
    def __init__(self):
        self.symlinks = {}

        print("Library Linker")

        self.system_executable = Path(sys.executable)
        print(" ", "system_executable", self.system_executable)

        self.system_prefix = Path(sys.prefix)
        print(" ", "system_prefix", self.system_prefix)

        self.system_path = [Path(p) for p in sys.path]
        print(" ", "system_path")
        for p in self.system_path:
            print(" ", " ", p)

        print()

        values = pipenv_values(["executable", "prefix", "path"])

        self.pipenv_executable = Path(values["executable"])
        print(" ", "pipenv_executable", self.pipenv_executable)

        if self.system_executable == self.pipenv_executable:
            raise RuntimeError(
                f"pipenv python3 must not be {sys.executable} - run this outside pipenv!"
            )

        self.pipenv_prefix = Path(values["prefix"])
        print(" ", "pipenv_prefix", self.pipenv_prefix)

        self.pipenv_path = [Path(p) for p in values["path"]]
        print(" ", "pipenv_path")
        for p in self.pipenv_path:
            print(" ", " ", p)

        yyy = [
            p.parent.name
            for p in self.pipenv_path
            if (
                (p.name in ["dist-packages", "site-packages"])
                and (str(p).startswith(f"{self.pipenv_prefix}/"))
            )
        ]
        print(" ", "yyy")
        for p in yyy:
            print(" ", " ", p)
        self.pipenv_python_dir = yyy[0]
        for p in yyy[1:]:
            if p != self.pipenv_python_dir:
                raise RuntimeError("All names in yyy should be the same")

        print(" ", "pipenv_python_dir", self.pipenv_python_dir)

        print()

    def link_lib(self, libname):
        print("Module", libname)
        module = import_module(libname)
        module_path = [Path(p) for p in module.__path__]
        print(" ", "module_path")
        for p in module_path:
            print(" ", " ", "*", p)

            if p.name != libname:
                raise RuntimeError("last path component must be libname")

            packages_dir = p.parent.name
            if packages_dir not in ["dist-packages", "site-packages"]:
                raise RuntimeError(
                    "second to last path component must be {dist,site}-packages"
                )
            python_dir = p.parent.parent.name
            if not python_dir.startswith("python3"):
                raise RuntimeError(
                    "third to last path component must begin with 'python3'"
                )

            lib_dir = p.parent.parent.parent.name
            if lib_dir not in ["lib", "lib32", "lib64"]:
                raise RuntimeError("fourth to last path component must be lib{,32,64}")

            symlink = self.pipenv_prefix.joinpath(
                lib_dir, self.pipenv_python_dir, "site-packages", libname
            )
            print(" ", " ", "<", symlink)

            self.symlinks[symlink] = p
        print()


def main():
    libname_list = ["gi"]
    if libname_list:
        ll = LibraryLinker()
        for libname in libname_list:
            ll.link_lib(libname)

        print("Symlinks")
        for symlink, target in iter(ll.symlinks.items()):
            ensure_symlink(target, symlink)


if __name__ == "__main__":
    main()
