#!/bin/bash
#
# Copyright (c) 2020 Jim Ramsay <i.am@jimramsay.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# This is a shell script instead of a python script to allow for
# easily calling both the system python3 (without the pipenv) and the
# pipenv python3 (inside the pipenv).

# Non-sh bash features used:
#
#   * array variables
#
#     This makes the support for systems with python site-packages in
#     more than one lib dir, e.g. in 'lib' and 'lib64', much easier.
#
#   * [[ ]]
#
#     This is more or less due to programmer laziness.


# The libs to symlink from the system into the pipenv
LIBS=("gi")

# The system python (as opposed to the pipenv python)
SYSPYTHON="/usr/bin/python3"


libpaths() {
    local PYTHON=$1
    $PYTHON -c "import sys; print('\n'.join(sys.path))" | grep -e "site-packages" -e "dist-packages" | sort
}

syspaths=($(libpaths $SYSPYTHON))
echo "syspaths:" "${syspaths[@]}"

envpaths=($(libpaths "pipenv run python3"))
echo "envpaths:" "${envpaths[@]}"

if [[ "${#syspaths[@]}" -ne "${#envpaths[@]}" ]]; then
    echo "Path array size mismatch"
    exit 1
fi

echo

for i in "${!syspaths[@]}"; do
    envpath="${envpaths[$i]}"
    syspath="${syspaths[$i]}"
    echo "envpath: $envpath"
    echo "syspath: $syspath"
    echo

    for lib in "${LIBS[@]}"; do
	linkpath="$envpath/$lib"
	linktarget="$syspath/$lib"
	echo "linkpath: $linkpath"
	echo "linktarget: $linktarget"
	if test -L "$linkpath" && test "x$(readlink "$linkpath")" = "x$linktarget"; then
	    echo "Nothing to do ($linkpath already pointing to $linktarget)"
	    echo
	    continue
	fi
	if test -e "$linkpath"; then
	    echo "Error: Link $linkpath already exists"
	    exit 1
	fi
	if test -e "$linktarget"; then
	    echo "Link target does not exist, skipping"
	    echo
	    continue
	fi

	echo "Linking $linktarget to $linkpath"
	if ln -s "$linktarget" "$linkpath"; then
	    echo "Linking successful"
	    echo
	else
	    echo "Linking has failed."
	    exit 1
	fi
    done
done

echo "Finished linking system libs."
